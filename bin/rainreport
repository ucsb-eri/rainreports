#!/usr/bin/env bash
# want to add some command line args
# in particular: --silent
executable="$0"
exe=`basename $executable`
errs="/tmp/${exe}-errs.$$"
debug=
v=1
type=
#url=http://www.countyofsb.org/uploadedFiles/pwd/Content/Water/Documents/rainfallreport.pdf
# This first url is for the combined full water year
# WY2021 runs from 2020-09-01 -> 2021-08-31
# should download this file each day and sort out which water year it is and write the file 
# out to a temp file change the file when the size of the file gets smaller
urlfull='http://www.countyofsb.org/pwd/water/downloads/hydro/rainfallreports/rainfallreport(previous).pdf'
url='http://www.countyofsb.org/pwd/water/downloads/hydro/rainfallreports/rainfallreport.pdf'
urlfull='https://files.countyofsb.org/pwd/hydrology/rainfallreport(previous).pdf'
url='https://files.countyofsb.org/pwd/hydrology/rainfallreport.pdf'
urlfull='https://files.countyofsb.org/pwd/hydrology/Rainfall%20Reports/rainfallreport(previous).pdf'
url='https://files.countyofsb.org/pwd/hydrology/Rainfall%20Reports/rainfallreport.pdf'

RAINFALL_REPORTS_DIR=${RAINFALL_REPORTS_DIR:-~/rainfallreports}
[ ! -d "${RAINFALL_REPORTS_DIR}" ] && mkdir "${RAINFALL_REPORTS_DIR}"
[ ! -d "${RAINFALL_REPORTS_DIR}" ] && { echo "failed to create dir: ${RAINFALL_REPORTS_DIR}"; exit 1; }

SQLITE=sqlite3
log=/var/log/rainreports
logds=$(date +'%Y%m%d-%H%M%S')



################################################################################
myExit(){
    [ "$debug" ]&& echo "housecleaning"
    [ "$2" ] && echo "$2" >&2
    [ -f $errs ] && { echo "Found the following errors:" ; cat $errs >&2 ; }
    rm -rf /tmp/${exe}-*.$$
    [ "$debug" ] && echo "exit($1)"
    exit $1
}
################################################################################
# The following collection is likely most current in zfsutil
# Even at that the -o in vecho may not be the best way to do that, ideally update
# v to verbose or gVERBOSE or VERBOSE in everything...
################################################################################
vecho(){
    [ -n "$verbose" -o -n "$v" ] && echo "$@" || return 0
}
################################################################################
decho(){
    [ -n "$debug" ] && echo "debug: " "$@" || return 0
}
################################################################################
techo(){
    [ -n "$TEST_MODE" ] && echo "TESTMODE: " "$@" || return 0
}
################################################################################
# echo to stderr
eecho(){
    echo "$@" 1>&2;
}
################################################################################
deecho(){
    [ -n "$debug" ] && eecho "$@" || return 0
}
################################################################################
lecho(){
    echo "# ${logds}:" "$@" >> ${log} || return 0
}
################################################################################
rfru_help(){
    thelp=/tmp/${exe}-help.$$

    echo "$usage"
    echo "  --verbose - verbose output turned on"
    echo "  --debug   - debugging output turned on"
    echo ""
    echo "where subcommand is one of the following:"

    # see if invoked with absolute or relative path
    if [ -x $0 ]; then
        self=$0
    fi

    # check path entries to see about finding
    for pentry in `echo $PATH | tr ':' ' '`
    do
        if [ -f ${pentry}/$exe ]; then
            self=${pentry}/$exe
        fi
    done

    subcommand_prefix="rfru_"
    if [ "$self" ]; then
        sclist=`grep ')' $self | egrep "$subcommand_prefix" | grep -v '(' | cut -d ')' -f 1 | tr -d ' ' | grep -v '^[-*]'`
        echo "" > $thelp
        for sc in $sclist
        do
            printf "  $sc\n"
            #regex="'^#.*${subcommand_prefix}${sc}'"
            #egrep -E $regex $self >> $thelp
            #egrep -E $regex $self
            #echo "$regex"
        done
        cat $thelp
        #regex="^# ${subcommand_prefix}'"

        # would be cool to use something like the following to get the longest subcommand
        longestsc=`echo "$sclist" | xargs -n1  -i sh -c 'echo \`echo -n {} | wc -c\`' | sort -n | tail -1`
        #echo "sclist $sclist, longestsc: $longestsc"

        egrep "^# ${subcommand_prefix}" $self | sed -e "s/^# ${subcommand_prefix}//" > $thelp
    else
        echo "error finding self, PATH must not be set correctly"
    fi
    echo ""

    #echo "thelp: $thelp"
    #cat "$thelp"

    # this almost works, the trick will be dealing with continuation lines, preserving
    # spaces will likely help...  Thus the IFS, Hmmmm, whitespace around separator seems to get lost
    oIFS=$IFS
    IFS='^'
    while read "subc" "text" ; do
        [ $subc ] && sep=" - " || sep="   "
        #var1=`echo "$helpline" | cut -d' - ' -f1`
        #var2=`echo "$helpline" | cut -d' - ' -f2-`
        printf "  %-${longestsc}s%s%s\n" "$subc" "$text"
    done < "$thelp"
    IFS="$oIFS"

}
################################################################################
rfru_determineFetchType(){
    curl=`command -v curl`
    wget=`command -v wget`
    [ -n "$wget" ] && type=wget
    [ -n "$curl" ] && type=curl
}
################################################################################
rfru_getDateStampFromFile(){
    lpdf="$1"
    updated=$(pdftotext -raw $lpdf - | egrep '^Updated ')
    #echo "Updated: $updated"
    wrongDateStamp=$(echo "$updated" | sed -e 's/^Updated [0-9]*[ap]m: //' -e 's/ Water Year.*$//')
    m=$(echo "$wrongDateStamp" | cut -d/ -f1)
    d=$(echo "$wrongDateStamp" | cut -d/ -f2)
    y=$(echo "$wrongDateStamp" | cut -d/ -f3)
    #echo "dscomponents: $y $m $d"
    ds=$(printf '%04d%02d%02d' "$y" "$m" "$d")
    echo "${ds}"
}
################################################################################
rfru_fetch(){
    lecho "fetch subcommand"
    cd "${RAINFALL_REPORTS_DIR}"
    [ $? -eq 0 ] || { echo "failed to cd to dir: ${RAINFALL_REPORTS_DIR}"; exit 1; }
    tmp=./rainfall.tmp
    rfru_determineFetchType
    case $type in
        curl)
            $curl --output $tmp $url > /dev/null 2>&1
            ;;
        wget)  # never actually came up with a usage for wget
            ;;
    esac

    ds=$(rfru_getDateStampFromFile "${tmp}")
    dsname=rainfallreport-$ds.pdf

    [ -e "$dsname" ] && lecho "rainfallreport for $ds already exists." || { lecho "new rainfallreport $dsname fetched to ${RAINFALL_REPORTS_DIR}!"; }
    [ -e "$dsname" ] && vecho "rainfallreport for $ds already exists." || { vecho "new rainfallreport $dsname fetched to ${RAINFALL_REPORTS_DIR}!"; mv $tmp $dsname; }

    # if we have specified a db file during fetch, go ahead and import into db as well
    if [ -n "$db" ]; then
        [ -f "$db" ] || rfru_init
        rfru_import ${RAINFALL_REPORTS_DIR}/$dsname
    fi
}
################################################################################
# gzip the files in prep for db insertion
rfru_gzip(){
    printf ''
}
################################################################################
rfru_init(){
    [ -n "$db" ] || myExit 1 "db not set, exiting"

sql="
DROP TABLE IF EXISTS rainreports;
DROP VIEW IF EXISTS rr;
CREATE TABLE IF NOT EXISTS rainreports (ds text PRIMARY KEY NOT NULL, ymds text, year text, pdfz blob, UNIQUE(ds) ON CONFLICT REPLACE);
CREATE VIEW IF NOT EXISTS rr AS SELECT ds,ymds,year FROM rainreports;
"

echo "$sql" | $SQLITE "$db"
}
################################################################################
rfru_dbCheck(){
    [ -n "$db" -a -f "$db" ] || myExit 1 "db not set or doesn't exist, exiting"
}
################################################################################
# need to decide how we are gonna derive the date, either reparse the PDF, or
# rely on naming convention.
################################################################################
rfru_import(){
    [ -n "$db" -a -f "$db" ] || myExit 1 "db not set or doesn't exist, exiting"
    rfru_dbCheck
    for pdf in "$@"; do
        decho "Processing file: ${pdf}"
        [ -f "$pdf" ] || { echo "$pdf not found"; continue; }
        # check to see if file is compressed, based purely on filename
        echo "${pdf}" | grep -q '.*\.pdf$'
        origPDF=$?
        echo "$pdf" | grep -q '.*\.pdf.gz$'
        gzipped=$?

        # should attempt to pull date info from PDF before resorting to using filename
        ds=$(rfru_getDateStampFromFile "${pdf}")
        [ -n "${ds}" ] || ds=$(echo "$pdf" | sed -e 's/^.*\(20[12][0-9][0-9][0-9][0-9][0-9]\)\.pdf.*$/\1/')
        # If we cannot derive the ds from the PDF AND if the filename is not in the expected format, then we
        # will have a long fliename here which is not viable.
        # ie: when they changed the old URL, they left a short page documenting that, but it ended up with a yearstamp of the whole filename
        year=$(echo "${ds}" | sed -e 's/^.*\(20[12][0-9]\)[0-9][0-9][0-9][0-9].*$/\1/')
        ymds=$(echo "${ds}" | sed -e 's/^.*\(20[12][0-9][0-9][0-9]\)[0-9][0-9].*$/\1/')

        decho "ds: $ds, year: $year, ymds: $ymds"

        if [ $gzipped ]; then   # gzipped actually means NOT gzipped
            if [ $origPDF ]; then
                decho "file is PDF, needs gzipping"
                pdfz="$pdf.gz"
                gzip --stdout $pdf > $pdfz
                sql="INSERT INTO rainreports(ds,ymds,year,pdfz) VALUES ('$ds','$ymds','$year',readfile('$pdfz'));"
                echo "$sql" | $SQLITE "$db"
                rm $pdfz
                #echo "$sql"
            else
                decho "file is not PDF and not gzipped, so not sure what we were passed"
            fi
        else
            decho "gzipped already: can just drop into db"
            sql="INSERT INTO rainreports(ds,ymds,year,pdfz) VALUES ('$ds','$ymds','$year',readfile('$pdf'));"
            echo "$sql" | $SQLITE "$db"
        fi
        decho "$pdf: $origPDF, $gzipped"
    done
}
################################################################################
# need to decide how we are gonna derive the date, either reparse the PDF, or
# rely on naming convention.
################################################################################
rfru_rename(){
    # files are expected to be uncompressed
    for pdf in "$@"; do
        decho "Processing file: ${pdf}"
        [ -f "$pdf" ] || { echo "$pdf not found"; continue; }

        # should attempt to pull date info from PDF before resorting to using filename
        ds=$(rfru_getDateStampFromFile "${pdf}")
        [ -n "${ds}" ] || ds=$(echo "$pdf" | sed -e 's/^.*\(20[12][0-9][0-9][0-9][0-9][0-9]\)\.pdf.*$/\1/')

        decho "ds: $ds, year: $year, ymds: $ymds"
        dname=$(dirname ${pdf})
        newname="${dname}/rainfallreport-$ds.pdf"
        [ $newname = $pdf ] || { decho "mv ${pdf} ${newname}"; mv "${pdf}" "${newname}"; }
    done
}
################################################################################
rfru_wy(){
    # use current date as a default
    wyfullstamp=$(date +'%Y%m')
    wyyy=$(date +'%Y')
    wymm=$(date +'%m' | sed -e 's/^0//')
    [ $wymm -gt 9 ] && ((wyyy)) 
    wyds=${wyyy}
    wyds+=$(printf "%02d" "${wymm}")
}
################################################################################
lecho "main"
v=1
while [ $# -ge 1 ]; do
    case $1 in
        -v)                  v=1 ;;
        --verbose)           v=1 ;;
        -d)                  debug=1 ;;
        --debug)             debug=1 ;;
        --db=*)              db=`echo "$1" | cut -d= -f2-` ;;
        --type=*)            type=`echo "$1" | cut -d= -f2-` ;;
        --silent)            v= ;;
        --help)              rfru_help; myExit 1 ;;
        *)                   break ;;
    esac
    shift
done

if [ $# -eq 0 ]; then
    subcommand=fetch
else
    subcommand=$1
    shift
fi

case $subcommand in
    list)                 rfru_list ;;
    init)                 rfru_init ;;
    fetch)                rfru_fetch  "$@" ;;
    gzip)                 rfru_gzip   "$@" ;;
    import)               rfru_import "$@" ;;
    rename)               rfru_rename "$@" ;;
    wy)                   rfru_wy "$@" ;;
    status)               rfru_status ;;
    help)                 rfru_help   ;;
    *)                    rfru_help; myExit 1 ;;
esac

myExit 0
